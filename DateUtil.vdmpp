class DateUtil

types  
    public Date :: year : nat
                   month: nat
                   day  : nat
                   hour : nat
                   min	: nat
            inv d == isValidDate(d.year, d.month, d.day, d.hour, d.min);

functions

    public static isValidDate : nat * nat * nat * nat * nat -> bool
    isValidDate(year, month, day, hour, min) == 
      year >= 1 and month >= 1 and month <= 12 and 
      day >= 1 and day <= daysOfMonth(year, month) and 
      hour <= 23 and min <= 59;
      
    public static isLeapYear : nat -> bool
    isLeapYear(year) ==
      year mod 4 = 0 and year mod 100 <> 0 or year mod 400 = 0;

    public static daysOfMonth : nat * nat -> nat
    daysOfMonth(year, month) ==
    ( 
      cases month :
        1, 3, 5, 7, 8, 10, 12 ->  31,
        4, 6, 9, 11 -> 30,
        2 -> if isLeapYear(year) then 29 else 28
      end 
    )
    pre month >= 1 and month <= 12;
    
    public static isAfter : Date * Date -> bool
    isAfter(d1, d2) ==
      d1.year > d2.year or 
      d1.year = d2.year and d1.month > d2.month or
      d1.year = d2.year and d1.month = d2.month and d1.day > d2.day or 
      d1.year = d2.year and d1.month = d2.month and d1.day = d2.day and d1.hour > d2.hour or
      d1.year = d2.year and d1.month = d2.month and d1.day = d2.day and d1.hour = d2.hour and d1.min > d2.min;
      
end DateUtil