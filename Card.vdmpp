class Card

instance variables

	public id : nat;
	public dateOfExpiration : [DateUtil`Date] := nil;
	
operations

	-- Create a new card specifying the date of expiration
	public Card: DateUtil`Date * nat ==> Card
	Card(doe, cardID) == (
		id := cardID;
		dateOfExpiration := doe;
		
		return self;
	);
	
	-- Create a new card without specifying the date of expiration
	public Card: nat ==> Card
	Card(cardID) == (
		id := cardID;
		
		return self;
	);
	
	public getID: () ==> nat
	getID() == return id;
	
	public setDateOfExpiration: DateUtil`Date ==> ()
	setDateOfExpiration(newDOE) == dateOfExpiration := newDOE;
	
	public getDateOfExpiration: () ==> DateUtil`Date
	getDateOfExpiration() == return dateOfExpiration;
	
	public removeDateOfExpiration: () ==> ()
	removeDateOfExpiration() == dateOfExpiration := nil;
	
	public isExpired: DateUtil`Date ==> bool
	isExpired(currentDate) == return if dateOfExpiration <> nil then DateUtil`isAfter(currentDate, dateOfExpiration) else false;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Card