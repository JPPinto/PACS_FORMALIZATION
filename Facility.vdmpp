class Facility

instance variables
	-- The set of all users currently registered in the facility
	public static users: set of User := {};
	
	-- The set of all cards currently registered in the facility
	public static facilityAccessCards: set of Card := {};
	
	-- The set of all access rules currently defined for the facility
	public static facilityAccessRules: set of AccessRule := {};
	
	-- The complete access log, represented as a set of access requests
	public static accessLog: set of AccessRequest := {};
	
	
operations
	-- Checks if there are no two users with the same card
	public static noTwoUsersWithSameCard: () ==> bool
	noTwoUsersWithSameCard() == (
		return forall user in set users &
			(not exists user2 in set users &
				(user <> user2 and user.getAccessCard() <> nil and user.getAccessCard() = user2.getAccessCard()))
	);
	
	-- Checks if there are no two users with the same id
	public static noTwoUsersWithSameID: () ==> bool
	noTwoUsersWithSameID() == (
		return forall user in set users &
			(not exists user2 in set users & (user <> user2 and user.getID() = user2.getID()))
	);
	
	-- Checks if there are no two cards with the same id
	public static noTwoCardsWithSameID: () ==> bool
	noTwoCardsWithSameID() == (
		return forall accessCard in set facilityAccessCards &
			(not exists otherAccessCard in set facilityAccessCards &
				(accessCard <> otherAccessCard and accessCard.getID() = otherAccessCard.getID()))
	);
	
	public static addUser: User ==> ()
	addUser(user) == users := users union {user}
	pre user not in set users
	post user in set users;
	
	public static removeUser: User ==> ()
	removeUser(user) == users := users \ {user}
	pre user in set users
	post user not in set users;
	
	public static addCard: Card ==> ()
	addCard(accessCard) == facilityAccessCards := facilityAccessCards union {accessCard}
	pre accessCard not in set facilityAccessCards
	post accessCard in set facilityAccessCards;
	
	public static removeCard: Card ==> ()
	removeCard(accessCard) == facilityAccessCards := facilityAccessCards \ {accessCard}
	pre accessCard in set facilityAccessCards
	post accessCard not in set facilityAccessCards;
	
	public static getRelatedRules: Card * Sector ==> set of AccessRule
	getRelatedRules(accessCard, accessedSector) == (
		dcl relatedRules: set of AccessRule := {};
		for all rule in set facilityAccessRules do (
			if rule.ruleRefersToAccessCardAndSector(accessCard, accessedSector) then relatedRules := relatedRules union {rule};
		);
		
		return relatedRules;
	);
	
	public static requestAccess: User * Sector * DateUtil`Date ==> AccessRule`Permission * AccessRequest
	requestAccess(requester, sector, requestDate) == (
		dcl relatedRules: set of AccessRule := getRelatedRules(requester.getAccessCard(), sector);
		dcl highestPriorityRule: AccessRule := AccessRule`getHighestPriorityRuleFromSet(relatedRules);
		dcl finalResult: AccessRule`Permission := highestPriorityRule.getPermission();
		
		dcl loggedRequest: AccessRequest :=
			new AccessRequest(requester, requester.getAccessCard(), sector, highestPriorityRule, finalResult, requestDate);
		
		accessLog := accessLog union {loggedRequest};
		
		return mk_(finalResult, loggedRequest);
	)
	pre requester in set users 

traces
-- TODO Define Combinatorial Test Traces here
end Facility