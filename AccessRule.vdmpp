class AccessRule
	/*
		An access rule defines the access policy to a given set of sectors (contemplated as a sector group),
		for a given set of access cards (contemplated as a card group).
		Each rule has a defined priority level from 1 to 3, 3 being the highest. This allows us to create rule exceptions
		in a more comprehensive way: if two rules restrict the same access, the one with the highest priority prevails.
		In cases with the same priority, if one DENIES access to the other, the access is denied, as unwanted access is
		assumed more critical than blocked access. 
	 */
types
	public Permission = <ALLOW> | <DENY>;
	
values
	public static LOW: nat1 = 1;
	public static MID: nat1 = 2;
	public static HIGH: nat1 = 3;
	
instance variables
	public id: nat;
	public sectorGroup: [SectorGroup];
	public sector: [Sector];
	public cardGroup: [CardGroup];
	public accessCard: [Card];
	public permission: Permission;
	
	public startDate: DateUtil`Date;
	public endDate: [DateUtil`Date] := nil;
	
	public priority: nat1 := LOW;
	
	inv if endDate <> nil then DateUtil`isAfter(endDate, startDate) else true;
	inv priority in set {LOW, MID, HIGH};
	inv if sectorGroup <> nil then sector = nil else sector <> nil;
	inv if cardGroup <> nil then accessCard = nil else accessCard <> nil;
	
operations

	-- Create an access rule given an access card and a sector
	public AccessRule: nat * Sector * Card * Permission * nat1 * DateUtil`Date * [DateUtil`Date] ==> AccessRule
	AccessRule(ruleID, relatedSector, relatedAccessCard, accessPermission, rulePriority, ruleStartDate, ruleEndDate) == (
		id := ruleID;
		sectorGroup := nil;
		sector := relatedSector;
		cardGroup := nil;
		accessCard := relatedAccessCard;
		permission := accessPermission;
		startDate := ruleStartDate;
		endDate := ruleEndDate;
		
		priority := rulePriority;
		
		return self
	)
	pre if ruleEndDate <> nil then DateUtil`isAfter(ruleEndDate, ruleStartDate) else true
		and rulePriority in set {LOW, MID, HIGH};
		
	-- Create an access rule given an access card and a sector group
	public AccessRule: nat * SectorGroup * Card * Permission * nat1 * DateUtil`Date * [DateUtil`Date] ==> AccessRule
	AccessRule(ruleID, relatedSectorGroup, relatedAccessCard, accessPermission, rulePriority, ruleStartDate, ruleEndDate) == (
		id := ruleID;
		sectorGroup := relatedSectorGroup;
		sector := nil;
		cardGroup := nil;
		accessCard := relatedAccessCard;
		permission := accessPermission;
		startDate := ruleStartDate;
		endDate := ruleEndDate;
		
		priority := rulePriority;
		
		return self
	)
	pre if ruleEndDate <> nil then DateUtil`isAfter(ruleEndDate, ruleStartDate) else true
		and rulePriority in set {LOW, MID, HIGH};
		
	-- Create an access rule given a card group and a sector
	public AccessRule: nat * Sector * CardGroup * Permission * nat1 * DateUtil`Date * [DateUtil`Date] ==> AccessRule
	AccessRule(ruleID, relatedSector, relatedCardGroup, accessPermission, rulePriority, ruleStartDate, ruleEndDate) == (
		id := ruleID;
		sectorGroup := nil;
		sector := relatedSector;
		cardGroup := relatedCardGroup;
		accessCard := nil;
		permission := accessPermission;
		startDate := ruleStartDate;
		endDate := ruleEndDate;
		
		priority := rulePriority;
		
		return self
	)
	pre if ruleEndDate <> nil then DateUtil`isAfter(ruleEndDate, ruleStartDate) else true
		and rulePriority in set {LOW, MID, HIGH};
		
	-- Create an access rule given a card group and a sector group
	public AccessRule: nat * SectorGroup * CardGroup * Permission * nat1 * DateUtil`Date * [DateUtil`Date] ==> AccessRule
	AccessRule(ruleID, relatedSectorGroup, relatedCardGroup, accessPermission, rulePriority, ruleStartDate, ruleEndDate) == (
		id := ruleID;
		sectorGroup := relatedSectorGroup;
		sector := nil;
		cardGroup := relatedCardGroup;
		accessCard := nil;
		permission := accessPermission;
		startDate := ruleStartDate;
		endDate := ruleEndDate;
		
		priority := rulePriority;
		
		return self
	)
	pre if ruleEndDate <> nil then DateUtil`isAfter(ruleEndDate, ruleStartDate) else true
		and rulePriority in set {LOW, MID, HIGH};
	
	public getPriority: () ==> nat1
	getPriority() == return priority;
	
	public getPermission: () ==> Permission
	getPermission() == return permission;
	
	public getExpirationDate: () ==> [DateUtil`Date]
	getExpirationDate() == return endDate;
	
	public setExpirationDate: DateUtil`Date ==> ()
	setExpirationDate(doe) == endDate := doe
	pre DateUtil`isAfter(doe, startDate);
	
	public isExpired: DateUtil`Date ==> bool
	isExpired(currentDate) == return if (endDate <> nil) then DateUtil`isAfter(currentDate, endDate) else false;
	
	public ruleRefersToAccessCard: Card ==> bool
	ruleRefersToAccessCard(cardToCheck) == return if accessCard <> nil then accessCard = cardToCheck else cardGroup.containsCard(cardToCheck);
	
	-- Include possible parent sectors here too
	public ruleRefersToSector: Sector ==> bool
	ruleRefersToSector(sectorToCheck) == return if sector <> nil
		then (
			sector = sectorToCheck or if sector.parent <> nil then sectorToCheck in set sector.getAncestors() else false
		)
		else sectorGroup.containsSector(sectorToCheck) or exists groupSector in set sectorGroup.sectors & (groupSector.parent <> nil and sectorToCheck in set groupSector.getAncestors());
	
	public ruleRefersToAccessCardAndSector: Card * Sector ==> bool
	ruleRefersToAccessCardAndSector(cardToCheck, sectorToCheck) ==
		return ruleRefersToAccessCard(cardToCheck) and ruleRefersToSector(sectorToCheck);
	
	-- This returns a full list of concerned sectors for this rule. Bearing in mind that someone with access to
	-- a particular sector must also have access to the parent sectors, this operation returns:
	-- Either a full list of accessable sectors and their parents, if this is an <ALLOW> rule;
	-- Or a list of the main sectors refered in the sector group, if this is a <DENY> rule (since denying access
	-- to a specific sector doesn't necessarily mean we can't access its parent, by this rule):
	public fullListOfConcernedSectors: () ==> set of Sector
	fullListOfConcernedSectors() == (
		dcl mainSectors: set of Sector := (if sectorGroup <> nil then sectorGroup.getSectors() else {sector});
		dcl accessableSectors: set of Sector := mainSectors;
		
		if permission = <ALLOW> then (
			for all mainSector in set mainSectors do (
				accessableSectors := accessableSectors union mainSector.getAncestors();
			);
		);
		
		return accessableSectors;
	);
	
	-- Retrieves, from a set of Access Rules, the one with the highest priority.
	-- Check class description for details on priorities.
	public static getHighestPriorityRuleFromSet: set of AccessRule ==> AccessRule
	getHighestPriorityRuleFromSet(setOfRules) == (
		dcl highestPriorityRule: [AccessRule] := nil;
		for all rule in set setOfRules do (
			if(highestPriorityRule <> nil) then 
				if rule.getPriority() > highestPriorityRule.getPriority() then highestPriorityRule := rule
				else
					if rule.getPriority() = highestPriorityRule.getPriority() then
						if rule.getPermission() = <DENY> then highestPriorityRule := rule;
		);
		
		return highestPriorityRule;
	);
	
	-- Retrieves, from a set of Access Rules, the one with the highest priority, but still valid (current date is not earlier than rule creation date and not expired).
	-- Check class description for details on priorities.
	public static getHighestPriorityValidRuleFromSet: set of AccessRule * DateUtil`Date ==> AccessRule
	getHighestPriorityValidRuleFromSet(setOfRules, currentDate) == (
		dcl highestPriorityRule: [AccessRule] := nil;
		for all rule in set setOfRules do (
			if(highestPriorityRule = nil) and DateUtil`isAfter(currentDate, rule.startDate) and not rule.isExpired(currentDate) then highestPriorityRule := rule
			else
				if(highestPriorityRule <> nil and DateUtil`isAfter(currentDate, rule.startDate) and not rule.isExpired(currentDate)) then 
					if rule.getPriority() > highestPriorityRule.getPriority() then highestPriorityRule := rule
					else
						if rule.getPriority() = highestPriorityRule.getPriority() then
							if rule.getPermission() = <DENY> then highestPriorityRule := rule;
		);
		
		return highestPriorityRule;
	);
	
end AccessRule